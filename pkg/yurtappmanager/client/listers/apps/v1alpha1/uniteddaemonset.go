/*
Copyright 2020 The OpenYurt Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openyurtio/yurt-app-manager/pkg/yurtappmanager/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UnitedDaemonSetLister helps list UnitedDaemonSets.
// All objects returned here must be treated as read-only.
type UnitedDaemonSetLister interface {
	// List lists all UnitedDaemonSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UnitedDaemonSet, err error)
	// UnitedDaemonSets returns an object that can list and get UnitedDaemonSets.
	UnitedDaemonSets(namespace string) UnitedDaemonSetNamespaceLister
	UnitedDaemonSetListerExpansion
}

// unitedDaemonSetLister implements the UnitedDaemonSetLister interface.
type unitedDaemonSetLister struct {
	indexer cache.Indexer
}

// NewUnitedDaemonSetLister returns a new UnitedDaemonSetLister.
func NewUnitedDaemonSetLister(indexer cache.Indexer) UnitedDaemonSetLister {
	return &unitedDaemonSetLister{indexer: indexer}
}

// List lists all UnitedDaemonSets in the indexer.
func (s *unitedDaemonSetLister) List(selector labels.Selector) (ret []*v1alpha1.UnitedDaemonSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UnitedDaemonSet))
	})
	return ret, err
}

// UnitedDaemonSets returns an object that can list and get UnitedDaemonSets.
func (s *unitedDaemonSetLister) UnitedDaemonSets(namespace string) UnitedDaemonSetNamespaceLister {
	return unitedDaemonSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UnitedDaemonSetNamespaceLister helps list and get UnitedDaemonSets.
// All objects returned here must be treated as read-only.
type UnitedDaemonSetNamespaceLister interface {
	// List lists all UnitedDaemonSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UnitedDaemonSet, err error)
	// Get retrieves the UnitedDaemonSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UnitedDaemonSet, error)
	UnitedDaemonSetNamespaceListerExpansion
}

// unitedDaemonSetNamespaceLister implements the UnitedDaemonSetNamespaceLister
// interface.
type unitedDaemonSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UnitedDaemonSets in the indexer for a given namespace.
func (s unitedDaemonSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UnitedDaemonSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UnitedDaemonSet))
	})
	return ret, err
}

// Get retrieves the UnitedDaemonSet from the indexer for a given namespace and name.
func (s unitedDaemonSetNamespaceLister) Get(name string) (*v1alpha1.UnitedDaemonSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("uniteddaemonset"), name)
	}
	return obj.(*v1alpha1.UnitedDaemonSet), nil
}
